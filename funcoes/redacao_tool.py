"""
Script para corre√ß√£o de reda√ß√£o - Vers√£o com acesso √† base de conhecimento

Este script implementa uma ferramenta de corre√ß√£o de reda√ß√£o que acessa
documentos espec√≠ficos sobre corre√ß√£o de reda√ß√£o.
"""

import os
import logging
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))) # Ajustar o caminho para importar m√≥dulos corretamente


# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("redacao.log"),
        logging.StreamHandler()
    ]
)

# Importar componentes do OTTO
from core.llm_manager import LLMManager
from core.vector_store import VectorStoreManager

def main():
    """Fun√ß√£o principal para corre√ß√£o de reda√ß√£o."""
    print("\n" + "=" * 50)
    print("ü§ñ OTTO - Corre√ß√£o de Reda√ß√£o")
    print("=" * 50)
    print("Digite 'sair' para encerrar.")
    print("=" * 50 + "\n")
    
    # Inicializar componentes
    try:
        print("Inicializando componentes...")
        llm_manager = LLMManager()
        vector_store_manager = VectorStoreManager()
        
        # Verificar se existe um vector store espec√≠fico para reda√ß√£o
        redacao_store_name = "redacao_knowledge"
        redacao_docs_dir = "./data/redacao"
        
        # Criar diret√≥rio se n√£o existir
        os.makedirs(redacao_docs_dir, exist_ok=True)
        
        # Criar ou carregar vector store espec√≠fico para reda√ß√£o
        print("Carregando base de conhecimento sobre reda√ß√£o...")
        redacao_store = vector_store_manager.create_or_load(redacao_store_name, redacao_docs_dir)
        
        # Solicitar texto da reda√ß√£o
        print("\nPor favor, cole o texto completo da reda√ß√£o que deseja corrigir:")
        texto_redacao = ""
        
        # Capturar m√∫ltiplas linhas at√© encontrar uma linha com apenas "FIM"
        print("(Digite 'FIM' em uma linha separada quando terminar)")
        
        while True:
            linha = input()
            if linha.strip() == "FIM":
                break
            if linha.lower() == "sair":
                print("\nOpera√ß√£o cancelada.")
                return
            texto_redacao += linha + "\n"
        
        if not texto_redacao.strip():
            print("\nNenhum texto fornecido. Opera√ß√£o cancelada.")
            return
        
        # Solicitar tema da reda√ß√£o (opcional)
        tema = input("\nQual √© o tema da reda√ß√£o? (opcional, pressione Enter para pular): ")
        
        # Recuperar conhecimento relevante sobre corre√ß√£o de reda√ß√£o
        print("\nBuscando crit√©rios e exemplos de corre√ß√£o...")
        docs = redacao_store.similarity_search(
            "crit√©rios corre√ß√£o reda√ß√£o ENEM exemplos", 
            k=5
        )
        
        # Extrair conte√∫do dos documentos
        conhecimento_redacao = "\n\n".join([doc.page_content for doc in docs])
        
        # Se n√£o encontrou documentos espec√≠ficos, usar crit√©rios padr√£o
        if not conhecimento_redacao.strip():
            conhecimento_redacao = """
            Crit√©rios de Avalia√ß√£o da Reda√ß√£o do ENEM:

            Compet√™ncia 1: Demonstrar dom√≠nio da norma padr√£o da l√≠ngua escrita.
            Compet√™ncia 2: Compreender a proposta de reda√ß√£o e aplicar conceitos das v√°rias √°reas de conhecimento para desenvolver o tema, dentro dos limites estruturais do texto dissertativo-argumentativo.
            Compet√™ncia 3: Selecionar, relacionar, organizar e interpretar informa√ß√µes, fatos, opini√µes e argumentos em defesa de um ponto de vista.
            Compet√™ncia 4: Demonstrar conhecimento dos mecanismos lingu√≠sticos necess√°rios para a constru√ß√£o da argumenta√ß√£o.
            Compet√™ncia 5: Elaborar proposta de interven√ß√£o para o problema abordado, respeitando os direitos humanos.

            Cada compet√™ncia vale de 0 a 200 pontos, totalizando 1000 pontos.
            """
        
        # Construir prompt para corre√ß√£o
        print("\nAnalisando reda√ß√£o...")
        
        prompt = f"""
        Voc√™ √© um especialista rigoroso em corre√ß√£o de reda√ß√µes do ENEM. Analise a reda√ß√£o abaixo seguindo rigorosamente os crit√©rios oficiais de corre√ß√£o.

        TEXTO DA REDA√á√ÉO:
        {texto_redacao}

        {f"TEMA DA REDA√á√ÉO: {tema}" if tema else ""}

        CRIT√âRIOS DE AVALIA√á√ÉO E EXEMPLOS DE REDA√á√ïES NOTA M√ÅXIMAS COM COMENT√ÅRIOS DE CORRETORES:
        {conhecimento_redacao}

        Forne√ßa uma an√°lise detalhada seguindo este formato:
        1. Compet√™ncia 1 (Dom√≠nio da norma culta): [nota 0-200] - [justificativa detalhada]
        2. Compet√™ncia 2 (Compreens√£o do tema): [nota 0-200] - [justificativa detalhada]
        3. Compet√™ncia 3 (Organiza√ß√£o de argumentos): [nota 0-200] - [justificativa detalhada]
        4. Compet√™ncia 4 (Constru√ß√£o da argumenta√ß√£o): [nota 0-200] - [justificativa detalhada]
        5. Compet√™ncia 5 (Proposta de interven√ß√£o): [nota 0-200] - [justificativa detalhada]

        NOTA FINAL: [soma das notas]

        FEEDBACK GERAL:
        [Resumo dos pontos fortes]
        [Resumo dos pontos a melhorar]
        [Sugest√µes espec√≠ficas para aprimoramento]

        Seja educativo, construtivo e espec√≠fico no feedback, apontando exemplos concretos do texto.

        Caso o texto n√£o esteja em formato dissertativo-argumentativo ou n√£o seja uma reda√ß√£o, informe que a reda√ß√£o n√£o atende aos requisitos e que o usuario deve tentar novamente com um texto adequado.
        """
        
        # Gerar corre√ß√£o
        resultado = llm_manager.generate(prompt, temperature=0.2)
        
        # Mostrar resultado
        print("\n" + "=" * 50)
        print("RESULTADO DA CORRE√á√ÉO:")
        print("=" * 50 + "\n")
        print(resultado)
        print("\n" + "=" * 50)
        
    except Exception as e:
        print(f"\nErro ao corrigir reda√ß√£o: {e}")

if __name__ == "__main__":
    main()
